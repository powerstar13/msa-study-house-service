plugins {
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2' // gradle 7.0 이상부터는 jvm 사용
    id 'java'
}

group = 'station3.assignment'
version = ''
sourceCompatibility = '11'

configurations {
    asciidoctorExtensions // dependencies 에서 적용한 것 추가
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security:2.7.0'
    implementation 'org.springframework.security:spring-security-test:5.7.1'
    testImplementation 'org.springframework.security:spring-security-test:5.7.1'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'

    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.1.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.1.Final'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    // StringUtils
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // R2DBC & H2
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc:2.7.0'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'io.r2dbc:r2dbc-h2'

    // Rest Docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient:2.0.6.RELEASE'
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.6.RELEASE' // build/generated-snippets 에 생긴 .adoc 조각들을 프로젝트 내의 .adoc 파일에서 읽어들일 수 있도록 연동해줍니다. 이 덕분에 .adoc 파일에서 operation 같은 매크로를 사용하여 스니펫 조각들을 연동할 수 있는 것입니다. 그리고 최종적으로 .adoc 파일을 HTML로 만들어 export 해줍니다.

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    // WebFlux
    implementation 'org.springframework.boot:spring-boot-starter-webflux:2.7.0'
    testImplementation 'io.projectreactor:reactor-test:3.4.18'

    // Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.7.0'

    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.7.0'

    // Dev Tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools:2.7.0'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.7.0'
}

ext {
    set('snippetsDir', file("build/generated-snippets")) // 아래에서 사용할 변수 선언
    set('docsDir', file("src/main/resources/static/docs"))
}

test {
    outputs.dir snippetsDir // 위에서 작성한 snippetsDir 디렉토리를 test의 output으로 구성하는 설정 -> 스니펫 조각들이 build/generated-snippets로 출력
    useJUnitPlatform()
}

// asciidoctor 작업 구성
asciidoctor {
    dependsOn test // test 작업 이후에 작동하도록 하는 설정
    configurations 'asciidoctorExtensions' // 위에서 작성한 configuration 적용
    inputs.dir snippetsDir // snippetsDir 를 입력으로 구성
    // 특정 .adoc에 다른 adoc 파일을 가져와서(include) 사용하고 싶을 경우, 경로를 baseDir로 맞춰주는 설정입니다.
    baseDirFollowsSourceFile()
}

// static/docs 폴더 비우기
asciidoctor.doFirst {
    delete docsDir
}

// asciidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy
task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("${asciidoctor.outputDir}")
    into docsDir
}

// build 의 의존작업 명시
build {
    dependsOn copyDocument
}

/**
 * [참고사항]
 * 공식 문서에서는 위의 ascidoctor.doFirst부터 아래 내용은 없고 이와 같은 내용만 있습니다.
 * 이렇게 하면 jar로 만들어 질때 옮겨지는 것으로 IDE로 돌릴 때는 build 폴더에서만 확인이 가능합니다.
 */
bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}
// [asciidoctor 순서 설명] 위와 같이 세팅하게 되면 ./gradlew build 진행시 test -> asciidoctor -> copyDocument -> build 순서로 진행되게 됩니다.
